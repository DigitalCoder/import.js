{"name":"$import","tagline":"JavaScript/CSS/LESS files $import utility","body":"$import (src[, srcN, ...][, callback])\r\n======================================\r\n\r\n### Basic useful feature list:\r\n\r\n * Load JS/CSS/LESS files into the document and execute callback(s) when loading is complete.\r\n * Ability to define custom name for any link to the file and handle loading by using event handler.\r\n * Ability to define custom type of the file (can be useful when the link to the file has not valid file extension) either js when can not be detected.\r\n * Automatic file caching logic (Any URL will be loaded only once while the page will not reloaded).\r\n\r\n\r\n\r\nResource definition format\r\n--------------------------\r\n\r\n```\r\n[ {name} : {type} ] {url}\r\n```\r\n\r\nResource can be defined by using follow parameters:\r\n* `url` : (required) URL to the file\r\n* `type`: (optional) Type of file that defined in `url`.\r\n          Available values is `js`, `css` or `less`.\r\n          Can be useful when the link to the file has not valid file extension.\r\n* `name`: (optional) `[a-zA-Z0-9.-_]` Unique identifier of the file that defined in `url`.\r\n          When `url` loading is complete the event `@import:{name}` will be dispatched for `document`.\r\n\r\nURL to the file can be defined by different ways:\r\n\r\n* Simple link:\r\n  ```\r\n  /url/path/to/the/file.{js|css|less}\r\n  ```\r\n* Named link:\r\n  ```\r\n  [some.name] /url/path/to/the/file.{js|css|less}\r\n  ```\r\n* Type defined link:\r\n  ```\r\n  [:css] /url/path/to/the/file.any\r\n  ```\r\n* Both:\r\n  ```\r\n  [some.name : css] /url/path/to/the/file.any\r\n  ```\r\n\r\nInstallation\r\n------------\r\nAdd `script` tag with `src` to the `import.min.js` file on your web site.\r\n```html\r\n<script type=\"text/javascript\" src=\"https://rawgit.com/w3core/import.js/master/import.min.js\"></script>\r\n```\r\n\r\nUsage\r\n-----\r\n\r\n### Basic example\r\n```javascript\r\n$import([\r\n  \"script.js\",\r\n  \"style.css\",\r\n  \"https://path.to/yet/another/script.js\",\r\n  \"[:css] https://path.to/yet/another/style.php\"\r\n],\r\nfunction (files) {\r\n  // Loading complete\r\n  console.log(files)\r\n});\r\n```\r\n### Advanced example\r\n```javascript\r\n\r\nvar plugin_1_files = [\r\n  \"https://path.to/the/script.js\",\r\n  \"[:css] https://path.to/the/style.php\"\r\n];\r\n\r\nvar plugin_2_files = {\r\n  plugin2Styles: \"/url/path/to/the/file.css\",\r\n  plugin2Scripts: [\r\n    \"/url/path/to/the/file.js\",\r\n    \"[core.script:js] /url/path/to/the/file.any\",\r\n    \"[ext.script] /url/path/to/the/file.js\"\r\n  ],\r\n  plugin2Loaded: function(files){\r\n    console.log(\"plugin2Loaded >\", files);\r\n  }\r\n};\r\n\r\ndocument.addEventListener(\"@import\", function(e){\r\n  console.log(\"@import >\", e.data);\r\n});\r\n\r\ndocument.addEventListener(\"@import:core.script\", function(e){\r\n  console.log(\"@import:core.script >\", e.data);\r\n});\r\n\r\n// The property name of an object can be used as `name` too\r\ndocument.addEventListener(\"@import:plugin2Styles\", function(e){\r\n  console.log(\"@import:plugin2Styles >\", e.data);\r\n});\r\n\r\n$import(plugin_1_files, plugin_2_files, function(files){\r\n  console.log(\"Main callback >\", files);\r\n});\r\n\r\n```\r\n\r\n-- Cheers\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}